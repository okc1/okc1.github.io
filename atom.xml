<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Woodstock Blog]]></title>
  <link href="http://okc1.github.io/atom.xml" rel="self"/>
  <link href="http://okc1.github.io/"/>
  <updated>2016-07-31T02:06:22-07:00</updated>
  <id>http://okc1.github.io/</id>
  <author>
    <name><![CDATA[Kevin Durant]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Design] MVC, MVP and MVVM]]></title>
    <link href="http://okc1.github.io/blog/2016/07/31/mvc-mvp-mvvm/"/>
    <updated>2016-07-31T00:00:00-07:00</updated>
    <id>http://okc1.github.io/blog/2016/07/31/mvc-mvp-mvvm</id>
    <content type="html"><![CDATA[<h1>MVC Pattern</h1>

<p>Model-View-Controller.</p>

<p>The model and controller logic are <strong>decoupled from user interface (view)</strong>.</p>

<p><img class="middle" src="http://okc1.github.io/assets/images/mvc-pattern.png"></p>

<ol>
<li><p>Model</p>

<p> business model + <strong>data access operations</strong> (i.e. data model)</p></li>
<li><p>View</p>

<p> <strong>only for displaying data</strong> (received from the controller, transforms the model into UI)</p></li>
<li><p>Controller <strong>(IMPORTANT)</strong></p>

<p> <strong>process incoming requests</strong>. It receives input from users via the View, then process the user&rsquo;s data with the help of Model and passing the results back to the View. Typically, it acts as the coordinator between the View and the Model.</p></li>
</ol>


<h2>example</h2>

<p>Ruby on Rails, Spring Framework, Apple iOS Development and ASP.NET MVC.</p>

<p>Softwares (not web apps).</p>

<h1>MVP pattern</h1>

<p>separate the presentation layer from the logic</p>

<p>The Presenter is responsible for handling all UI events on behalf of the view.</p>

<p><img class="middle" src="http://okc1.github.io/assets/images/mvp-pattern.png"></p>

<p>Unlike view and controller, view and presenter are completely decoupled from each other’s and communicate to each other’s by an interface.</p>

<p>Also, presenter does not manage the incoming request traffic as controller.</p>

<h2>Key Points about MVP</h2>

<ol>
<li><p>User interacts with the View.</p></li>
<li><p>There is one-to-one relationship between View and Presenter means one View is mapped to only one Presenter.</p></li>
<li><p>View has a reference to Presenter but View has not reference to Model.</p></li>
<li><p>Provides two way communication between View and Presenter.</p></li>
</ol>


<h2>example</h2>

<p>Android, ASP.NET Web Forms applications</p>

<h1>MVVM pattern</h1>

<p>This pattern supports two-way data binding between view and View model.</p>

<p>This enables automatic propagation of changes, within the state of view model to the View.</p>

<p>Typically, <strong>the view model uses the observer pattern</strong> to notify changes in the view model to model.</p>

<p><img class="middle" src="http://okc1.github.io/assets/images/mvvm-pattern.png"></p>

<h2>details</h2>

<p>The View Model is responsible for exposing methods, commands, and other properties that helps to maintain the state of the view, manipulate the model as the result of actions on the view, and trigger events in the view itself.</p>

<h2>Key Points about MVVM</h2>

<ol>
<li><p>User interacts with the View.</p></li>
<li><p>There is many-to-one relationship between View and ViewModel means many View can be mapped to one ViewModel.</p></li>
<li><p>View has a reference to ViewModel but View Model has no information about the View.</p></li>
<li><p>Supports two-way data binding between View and ViewModel.</p></li>
</ol>


<h2>example</h2>

<p>Ember.js, WPF, Silverlight</p>

<h1>Ref</h1>

<p>Main: <a href="http://www.dotnet-tricks.com/Tutorial/designpatterns/2FMM060314-Understanding-MVC,-MVP-and-MVVM-Design-Patterns.html">http://www.dotnet-tricks.com/Tutorial/designpatterns/2FMM060314-Understanding-MVC,-MVP-and-MVVM-Design-Patterns.html</a></p>

<p>TLDR: <a href="http://www.beyondjava.net/blog/model-view-whatever/">http://www.beyondjava.net/blog/model-view-whatever/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Design Twitter]]></title>
    <link href="http://okc1.github.io/blog/2016/07/11/design-twitter/"/>
    <updated>2016-07-11T00:00:00-07:00</updated>
    <id>http://okc1.github.io/blog/2016/07/11/design-twitter</id>
    <content type="html"><![CDATA[<h1>System design evaluation form</h1>

<ol>
<li>work solution</li>
<li>special cases</li>
<li>analysis</li>
<li>trade off</li>
<li>knowledge base</li>
</ol>


<h1>Design guideline: 4S</h1>

<ol>
<li><p>Scenario</p>

<p> ask, features, qps, DAU, interfaces</p></li>
<li><p>Service</p>

<p> split, application, module</p></li>
<li><p>Storage</p>

<p> schema, data, sql, NoSql, file system</p></li>
<li><p>Scale</p>

<p> sharding, optimize, special case</p></li>
</ol>


<h1>Scenario</h1>

<h2>DAU?</h2>

<p>Whta&rsquo;s the DAU/MAU rate?</p>

<p>Chatting apps like wechat/whatapp has a rate of around 75%, but facebook/twitter is lower at 60%.</p>

<h2>Enumerate the functions</h2>

<ol>
<li>registration</li>
<li>user profile display/edit</li>
<li>upload image/video</li>
<li>search</li>
<li>post a tweet</li>
<li>share a tweet</li>
<li>timeline</li>
<li>newsfeed</li>
<li>follow/unfollow</li>
</ol>


<h2>QPS</h2>

<ol>
<li><p>concurrent user</p>

<p> 150M user * 60 query/user / 60<em>60</em>24s = average QPS = 100K</p>

<p> <strong>peak QPS = 3 * average QPS = 300K</strong></p>

<p> fast growing product = 2 * peak QPS = 600K</p></li>
<li><p>read qps: 300K QPS</p></li>
<li>write qps: 5K QPS</li>
</ol>


<p>On average, <strong>a web server support around 1000 QPS</strong>, thus in this case, we need 300 servers to support the system.</p>

<h1>Service</h1>

<h2>4 services for Twitter</h2>

<p><img class="middle" src="http://okc1.github.io/assets/images/jiuzhang-four-service.png"></p>

<ol>
<li>user service

<ol>
<li>register</li>
<li>login</li>
</ol>
</li>
<li>tweet service

<ol>
<li>post tweet</li>
<li>news feed</li>
<li>timeline</li>
</ol>
</li>
<li>media service

<ol>
<li>upload image</li>
<li>upload video</li>
</ol>
</li>
<li>friendship service

<ol>
<li>follow</li>
<li>upfollow</li>
</ol>
</li>
</ol>


<h1>Storage</h1>

<ol>
<li><p>SQL</p>

<p> <strong>Good for</strong> accurate, small amount of data, more read than write.
 user table</p></li>
<li><p>NoSQL</p>

<p> <strong>Good for</strong> large amount of read/write, high scalability.
 tweets
 social graph (follower)</p></li>
<li><p>File System</p>

<p> <strong>Good for</strong> media files
 photo, video</p></li>
</ol>


<h2>Select the right DB</h2>

<p><img class="middle" src="http://okc1.github.io/assets/images/jiuzhang-db-selection.png"></p>

<p><strong>Question: can we use file system for tweets</strong>?</p>

<p>No, it&rsquo;s hard to query. Eg. query all tweets of my friends.</p>

<h2>Design data schema</h2>

<p>(optional) 3 tables needed:</p>

<ol>
<li>user table</li>
<li>tweet table</li>
<li>friendship table: this is not as straight forward, as it shall contain double directions info</li>
</ol>


<p><img class="middle" src="http://okc1.github.io/assets/images/jiuzhang-data-schema.png"></p>

<h1>Important: News Feed</h1>

<h2>pull model</h2>

<p>Read top 50 feeds from top 100 friends, then merge sort by date. (note that user is getting sync-blocked here).</p>

<p>Post tweet is simple 1 DB write.</p>

<p><strong>This design is bad, because file-system/DB read is slow</strong>. If you have N friends, you query O(N) DB queries. <strong>It&rsquo;s too slow (and user is getting sync-blocked, too)</strong>. We should have, ideally, &lt;= 7 DB queries per web page.</p>

<p><img class="middle" src="http://okc1.github.io/assets/images/jiuzhang-pull-diagram.png"></p>

<p><img class="middle" src="http://okc1.github.io/assets/images/jiuzhang-pull-code.png"></p>

<h3>problem</h3>

<ol>
<li>synchronously block user from getting news feed</li>
<li>too many DB reads</li>
</ol>


<h2>push model</h2>

<p>Each person have a list storing new feeds. When friend post tweet, <strong>fanout</strong> to my feed list.</p>

<p>When I read, I simply read top 100 from the feed list. <strong>So read is 1 DB read</strong>.</p>

<p>Post tweet is N DB writes, which is slow. <strong>However this is done async, so it does not matter</strong>.</p>

<p><img class="middle" src="http://okc1.github.io/assets/images/jiuzhang-push-diagram.png"></p>

<p><img class="middle" src="http://okc1.github.io/assets/images/jiuzhang-push-code.png"></p>

<p>One example of async implementation: <strong>RabbitMQ</strong></p>

<h1>Scale</h1>

<h2>optimize pull model</h2>

<p>Although it looks like push is faster than pull, <strong>facebook and twitter both use pull model</strong>.</p>

<ol>
<li>add cache for DB, reduce # of DB read</li>
<li><p>also cache each user&rsquo;s news feed</p>

<p> your yesterday&rsquo;s feeds are all cached, thus don&rsquo;t need to read everytime.</p></li>
</ol>


<h2>optimize push model</h2>

<ol>
<li>disk waste a lot, although disk is cheap</li>
<li><p>inactive user!</p>

<p> rank follower by weight, and don&rsquo;t write to inactive user (eg. last login time)</p></li>
<li><p>if follower is toooo much, like Lady Gaga, user pull for Lady Gaga.</p>

<p> Tradeoff: Push + Pull model.</p></li>
</ol>


<h2>optimize &lsquo;Like&rsquo; info</h2>

<p>In tweet table, if we need to count(user) who liked, it&rsquo;s gonna take forever.</p>

<p><strong>We must denormalize this data</strong>!</p>

<p><img class="middle" src="http://okc1.github.io/assets/images/jiuzhang-denormalize.png"></p>

<p>Denormalize: it&rsquo;s duplicate info but we store in table, because of performance improvement.</p>

<p><strong>Shortcoming: inconsistency</strong>!</p>

<ol>
<li>unless using SQL transaction, async failure can result in wrong counting number</li>
<li>race condition</li>
</ol>


<p>Solution: 1. use atomic operation 2. every day, schedule to update this number.</p>

<h2>optimize thundering herd problem</h2>

<p>When cache fails, all DB query will go to DB. This results in DB crash.</p>

<p>Hot spot (thundering herd)</p>

<p><img class="middle" src="http://okc1.github.io/assets/images/jiuzhang-thundering-herd.png"></p>

<p>Solution: hold all incoming queries (who fails cache), and only send 1 DB query. When result is returned, return to every query.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Octopress] Add Aside Content to Octopress]]></title>
    <link href="http://okc1.github.io/blog/2016/06/11/add-aside-content-octopress/"/>
    <updated>2016-06-11T00:00:00-07:00</updated>
    <id>http://okc1.github.io/blog/2016/06/11/add-aside-content-octopress</id>
    <content type="html"><![CDATA[<h1>Aside</h1>

<p>Example of this is the &lsquo;categories&rsquo; list on the right hand side of the blog page. It&rsquo;s always pinned on RHS, regardless of page content.</p>

<h1>Instruction</h1>

<ol>
<li><p>Add to source/_includes/asides/category_list.html with the following content. (remember to delete [delete-this-tag])</p>

<pre><code> &lt;section class="well"&gt;
   &lt;h1&gt;Categories&lt;/h1&gt;
   &lt;ul id="categories" class="nav nav-list"&gt;
     {[delete-this-tag]% category_list %[delete-this-tag]}
   &lt;/ul&gt;
 &lt;/section&gt;
</code></pre></li>
<li><p>Go to _config.yml and modify default_asides.</p>

<pre><code> default_asides: [asides/category_list.html, asides/recent_posts.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html, asides/advertise.html]
</code></pre></li>
<li><p>Since the &lsquo;category_list&rsquo; tag is not natively supported. Add plugins/category_list_tag.rb with the <a href="https://kaworu.ch/blog/2013/09/23/categories-page-with-octopress/">followin content</a>.</p>

<pre><code> module Jekyll
   class CategoryListTag &lt; Liquid::Tag
     def render(context)
       html = ""
       categories = context.registers[:site].categories.keys
       categories.sort.each do |category|
         posts_in_category = context.registers[:site].categories[category].size
         category_dir = context.registers[:site].config['category_dir']
         category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase)
         html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://okc1.github.io/#{category_url}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
       end
       html
     end
   end
 end

 Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)
</code></pre></li>
<li><p>rake generate &amp;&amp; rake preview</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] User Registry Table Design]]></title>
    <link href="http://okc1.github.io/blog/2016/05/08/user-registry-table-design/"/>
    <updated>2016-05-08T00:00:00-07:00</updated>
    <id>http://okc1.github.io/blog/2016/05/08/user-registry-table-design</id>
    <content type="html"><![CDATA[<h1>First word</h1>

<p>Designing a system like twitter, facebook or airbnb, first step is often <strong>User Registry</strong>.</p>

<p>The tables, <strong>we must use RDBMS</strong>, as it&rsquo;s more reliable.</p>

<h2>Table design</h2>

<p><strong>Friendship table</strong> is important:</p>

<p><img class="middle" src="http://okc1.github.io/assets/images/design-user-registry-tables.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Technical Challenges of Writing a Web Crawler]]></title>
    <link href="http://okc1.github.io/blog/2015/11/22/challenges-writing-crawler/"/>
    <updated>2015-11-22T00:00:00-08:00</updated>
    <id>http://okc1.github.io/blog/2015/11/22/challenges-writing-crawler</id>
    <content type="html"><![CDATA[<h1>1. Choose a framework</h1>

<p>Assuming we use Python to do this.</p>

<h2>plain python?</h2>

<p>We can write a simple Python crawler with the code below:</p>

<pre><code>import re, urllib

textfile = file('depth_1.txt','wt')
print "Enter the URL you wish to crawl.."
print 'Usage  - "http://phocks.org/stumble/creepy/" &lt;-- With the double quotes'
myurl = input("@&gt; ")
for i in re.findall('''href=["'](.[^"']+)["']''', urllib.urlopen(myurl).read(), re.I):
    print i  
    for ee in re.findall('''href=["'](.[^"']+)["']''', urllib.urlopen(i).read(), re.I):
        print ee
        textfile.write(ee+'\n')
textfile.close()
</code></pre>

<h2>Scrapy?</h2>

<ol>
<li>You only define the rules, Scrapy do the rest</li>
<li>easily plugin extensions</li>
<li>portable + python runtime.</li>
</ol>


<h3>Why Scrapy</h3>

<blockquote><p><a href="https://www.quora.com/What-are-the-advantages-of-Scrapy-compared-to-Beautiful-Soup">scrapy has the tools to manage every stage of a web crawl</a>, just to name a few:</p>

<ol>
<li><p>Requests manager - in charge of downloading pages all concurrently behind the scenes! You won&rsquo;t need to invest a lot of time in concurrent architecture.</p></li>
<li><p>Selectors -  parse the html document (eg. XPath)</p></li>
<li><p>Pipelines - after you retrieve the data, there&rsquo;s a bunch of functions to modify the data.</p></li>
</ol>
</blockquote>

<p>Following the spirit of other don’t repeat yourself frameworks, such as Django:</p>

<blockquote><p><a href="https://en.wikipedia.org/wiki/Scrapy">it makes it easier to build and scale large crawling projects</a> by allowing developers to re-use their code.</p></blockquote>

<p>For more, read <a href="http://doc.scrapy.org/en/latest/topics/architecture.html">Scrapy Architecture </a>.</p>

<p><img class="middle" src="http://okc1.github.io/assets/images/scrapy_architecture.png"></p>

<ol>
<li><p>Scrapy Engine</p>

<p> control data flow</p></li>
<li><p>Scheduler</p>

<p> receives requests from the engine and enqueues them for feeding them later</p></li>
<li><p>Downloader</p></li>
<li><p>Spiders</p></li>
<li><p>Item Pipeline</p></li>
<li><p>Downloader middlewares</p>

<p> specific hooks that sit between the Engine and the Downloader and process requests</p></li>
<li><p>Spider middlewares</p>

<p> specific hooks that sit between the Engine and the Spiders and are able to process spider input (responses) and output (items and requests).</p></li>
</ol>


<h1>2. Schedule a Scrapy job</h1>

<p>APScheduler? (todo)</p>

<p>add/remove jobs</p>

<h1>3. Choose a DB</h1>

<p>I chose NoSQL/MongoDB. <a href="http://stackoverflow.com/a/11980154">But why</a>?</p>

<ol>
<li><p>there&rsquo;s only a few tables with few columns</p></li>
<li><p>no overly complex associations between nodes</p></li>
<li><p>huge amount of time-based data</p></li>
<li><p>scaling requirements: MongoDB better horizontal scaling</p></li>
<li><p>different field names: dynamical storage</p></li>
</ol>


<h1>4. Technical Difficulty?</h1>

<h2>4.1 differrent way to crawl.</h2>

<p>We need to check AJAX response sometime and study each website&rsquo;s API.</p>

<p>Some site would <strong>close certain APIs</strong> if they found out too many queries requests.</p>

<h2>4.2 Difficulty navigating pages</h2>

<p>Study their URL structure.</p>

<p>eg.</p>

<pre><code>www.abc.com/index.html?page=milk&amp;start_index=0
</code></pre>

<p>Just play with the url params!</p>

<h2>4.3 What is key?</h2>

<p>I defined extra column only to store keys (combine a few key columns, and convert to lower-case).</p>

<p>We can search using <strong>regex</strong> though, but:</p>

<blockquote><p><a href="http://stackoverflow.com/a/7880894">Mongo (current version 2.0.0) doesn&rsquo;t allow</a> case-insensitive searches against indexed fields. For non-indexed fields, the regex search should be fine.</p></blockquote>

<p>How to go about it:</p>

<blockquote><p><a href="http://stackoverflow.com/a/4441412">searching with regex&rsquo;s case insensitive</a> means that mongodb cannot search by index, so queries against <strong>large datasets can take a long time</strong>.</p>

<p>Even with small datasets, it&rsquo;s not very efficient&hellip; which could become an issue if you are trying to achieve scale.</p>

<p>As an alternative, you can store an uppercase copy and search against that&hellip;</p>

<p>If your field is large, such as a message body, duplicating data is probably not a good option. I believe using <strong>an extraneous indexer like Apache Lucene</strong> is the best option in that case.</p></blockquote>

<h2>4.4 A lot bad data</h2>

<ol>
<li><p>write a sophisticated pipeline()</p></li>
<li><p>try not let bad data reach pipeline() - <strong>better</strong></p></li>
</ol>


<p>Make your spider better!</p>

<h2>4.5 NLP: brand names</h2>

<p>how? (todo)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Swizzle Sort]]></title>
    <link href="http://okc1.github.io/blog/2015/11/21/swizzle-sort/"/>
    <updated>2015-11-21T00:00:00-08:00</updated>
    <id>http://okc1.github.io/blog/2015/11/21/swizzle-sort</id>
    <content type="html"><![CDATA[<h1>Question</h1>

<p><a href="http://www.mitbbs.com/article_t/Recommend/31493121.html">link</a></p>

<blockquote><p>输入一个数组，要求输出满足：a[0]&lt;=a[1]>=a[2]&lt;=a[3]>=…</p></blockquote>

<h1>Solution</h1>

<blockquote><p>O(n)，一边扫描即可。发现不符合条件的只要跟前面一个数对调就可以，</p></blockquote>

<h1>Code</h1>

<pre><code>public int[] solve(int[] input) {
    boolean incr = true;
    int len = input.length;
    int p = 1;
    while (p &lt; len) {
        if (incr ^ (input[p - 1] &lt; input[p])) {
            Common.swap(input, p - 1, p);
        }
        p++;
        incr = !incr;
    }
    return input;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] How to Generate Maze]]></title>
    <link href="http://okc1.github.io/blog/2015/11/21/generate-maze/"/>
    <updated>2015-11-21T00:00:00-08:00</updated>
    <id>http://okc1.github.io/blog/2015/11/21/generate-maze</id>
    <content type="html"><![CDATA[<h1>Question</h1>

<p><a href="http://www.glassdoor.com/Interview/Design-a-2D-dungeon-crawling-game-It-must-allow-for-various-items-in-the-maze-walls-objects-and-computer-controlled-c-QTN_57.htm">link</a></p>

<blockquote><p>Design a 2D dungeon crawling game. It must allow for   various items in the maze - walls, objects, and computer-controlled characters.</p></blockquote>

<h1>Part 1: API design</h1>

<p>Serialize:</p>

<blockquote><p><a href="http://qr.ae/RbRhHv">if a certain cell has a wall</a> to the North and West but not to the South or East, it would be represented as 1001, or 9&hellip; (e.g., &ldquo;9,6,11,12\n3,10,10,4\n13,9,12,5\n3,6,1,6&rdquo; in a 4x4 maze)</p></blockquote>

<p>Design API~</p>

<h1>Part 2: Algorithm</h1>

<h2>Depth-first search</h2>

<p>This is most common and <a href="https://en.wikipedia.org/wiki/Maze_generation_algorithm#Depth-first_search">one of the simplest ways to generate a maze using a computer</a>. It&rsquo;s commonly implemented using <strong><a href="https://en.wikipedia.org/wiki/Maze_generation_algorithm#Recursive_backtracker">Recursive backtrack</a></strong>.</p>

<ol>
<li><p>from a random cell, select a random neighbour that hasn&rsquo;t been visited.</p></li>
<li><p>removes the &lsquo;wall&rsquo; and adds the new cell to a stack.</p></li>
<li><p>a cell with no unvisited neighbours is considered <strong>dead-end</strong>.</p></li>
<li><p>When at a dead-end it backtracks through the path until it reaches a cell with unvisited neighbours, continuing from there.</p></li>
<li><p>until every cell has been visited, the computer would backtrack all the way to the beginning cell.</p></li>
<li><p>Entire maze space is guaranted a complete visit.</p></li>
</ol>


<h3>side note</h3>

<blockquote><p>To add difficulty and a fun factor to the DFS, you can <strong>influence the likelihood of which neighbor you should visit</strong>, instead of completely random.</p>

<p>By making it more likely to visit neighbors to your sides, you can have a more horizontal maze generation.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Strategy Design Pattern]]></title>
    <link href="http://okc1.github.io/blog/2015/11/18/strategy-pattern/"/>
    <updated>2015-11-18T00:00:00-08:00</updated>
    <id>http://okc1.github.io/blog/2015/11/18/strategy-pattern</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p><strong><a href="https://en.wikipedia.org/wiki/Strategy_pattern">Strategy pattern</a></strong> (also known as the policy pattern) is a design pattern that <strong>enables an algorithm&rsquo;s behavior to be selected</strong> at runtime.</p>

<p>For instance, a class that performs <strong>validation on incoming data</strong> may use a strategy pattern to select a validation algorithm <strong>based on the type of data</strong>, the source of the data, user choice&hellip; These factors are not known <strong>until run-time</strong>&hellip;</p>

<h2>A car example</h2>

<p>Since accelerate and brake behaviors change frequently between models, <strong>a common approach is to implement these behaviors in subclasses</strong>. This approach has significant drawbacks: accelerate and brake behaviors <strong>must be declared in each new Car model</strong>.</p>

<p><img class="middle" src="http://okc1.github.io/assets/images/600px-StrategyPattern_IBrakeBehavior.png"></p>

<p>The strategy pattern uses <strong>composition</strong> instead of inheritance. This allows:</p>

<ol>
<li><p>better <strong>decoupling between the behavior</strong> and the class that uses it. (i.e. behavior can be changed without breaking the classes that use it)</p></li>
<li><p>classes can switch between behaviors by changing the specific implementation used without requiring any significant code changes.</p></li>
</ol>


<p>Code:</p>

<pre><code>/* Encapsulated family of Algorithms 
 * Interface and its implementations
 */
public interface IBrakeBehavior {
    public void brake(); 
}

public class BrakeWithABS implements IBrakeBehavior {
    public void brake() {
        System.out.println("Brake with ABS applied");
    }
}

public class Brake implements IBrakeBehavior {
    public void brake() {
        System.out.println("Simple Brake applied");
    }
}


/* Client which can use the algorithms above interchangeably */
public abstract class Car {
    protected IBrakeBehavior brakeBehavior;

    public void applyBrake() {
        brakeBehavior.brake();
    }

    public void setBrakeBehavior(IBrakeBehavior brakeType) {
        this.brakeBehavior = brakeType;
    }
}

/* Client 1 uses one algorithm (Brake) in the constructor */
public class Sedan extends Car {
    public Sedan() {
        this.brakeBehavior = new Brake();
    }
}

/* Client 2 uses another algorithm (BrakeWithABS) in the constructor */
public class SUV extends Car {
    public SUV() {
        this.brakeBehavior = new BrakeWithABS();
    }
}


/* Using the Car Example */
public class CarExample {
    public static void main(String[] args) {
        Car sedanCar = new Sedan();
        sedanCar.applyBrake();  // This will invoke class "Brake"

        Car suvCar = new SUV(); 
        suvCar.applyBrake();    // This will invoke class "BrakeWithABS"

        // set brake behavior dynamically
        suvCar.setBrakeBehavior( new Brake() ); 
        suvCar.applyBrake();    // This will invoke class "Brake" 
    }
}
</code></pre>

<p>This gives greater flexibility in design and is in harmony with the <strong><a href="https://en.wikipedia.org/wiki/Open/closed_principle">Open/closed principle</a></strong> (OCP) that states that <strong>classes should be open for extension but closed for modification</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Partition Problem (Divide Array Into Halves)]]></title>
    <link href="http://okc1.github.io/blog/2015/11/15/partition-problem/"/>
    <updated>2015-11-15T00:00:00-08:00</updated>
    <id>http://okc1.github.io/blog/2015/11/15/partition-problem</id>
    <content type="html"><![CDATA[<h1>Question</h1>

<p><a href="http://www.geeksforgeeks.org/dynamic-programming-set-18-partition-problem/">link</a></p>

<blockquote><p><a href="https://en.wikipedia.org/wiki/Partition_problem">partition problem</a> is the task of deciding whether a given multiset S of positive integers can be partitioned into two subsets S1 and S2 such that the sum of the numbers in S1 equals the sum of the numbers in S2.</p>

<p>Examples</p></blockquote>

<pre><code>arr[] = {1, 5, 11, 5}
Output: true 
The array can be partitioned as {1, 5, 5} and {11}

arr[] = {1, 5, 3}
Output: false 
The array cannot be partitioned into equal sum sets.
</code></pre>

<h1>Solution</h1>

<p><strong>DP</strong> (only if sum of the elements is not too big).</p>

<blockquote><p><a href="http://www.geeksforgeeks.org/dynamic-programming-set-18-partition-problem/">We can create a 2D array</a> of size (sum/2)*(n+1). And we can construct the solution in bottom up manner such that every filled entry has following property:</p></blockquote>

<pre><code>part[i][j] = 
    true if a subset of {arr[0], arr[1], ..arr[j-1]} has sum equal to i
    false otherwise
</code></pre>

<p>Note that we always cares about <strong>whether there exist a valid subset from beginning to index i</strong>.</p>

<p>Example DP array for input &ldquo;3,1,1,2,2,1&rdquo;:</p>

<p><img class="middle" src="http://okc1.github.io/assets/images/partition-problem-dp.jpg"></p>

<h1>Code</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 188] Best Time to Buy and Sell Stock IV]]></title>
    <link href="http://okc1.github.io/blog/2015/11/04/Best-Time-to-Buy-and-Sell-Stock-IV/"/>
    <updated>2015-11-04T00:00:00-08:00</updated>
    <id>http://okc1.github.io/blog/2015/11/04/Best-Time-to-Buy-and-Sell-Stock-IV</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/">link</a></p>

<div class="question-content">
              <p></p><p>Say you have an array for which the <i>i</i><sup>th</sup> element is the price of a given stock on day <i>i</i>.</p>

<p>Design an algorithm to find the maximum profit. You may complete at most <b>k</b> transactions.</p>

<p><b>Note:</b><br>
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>

<p><b>Credits:</b><br>Special thanks to <a href="https://oj.leetcode.com/discuss/user/Freezen">@Freezen</a> for adding this problem and creating all test cases.</p><p></p>
              
                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">
                  
                  <a class="btn btn-xs btn-primary" href="http://okc1.github.io/tag/dynamic-programming/">Dynamic Programming</a>
                  
                </span>
              
            </div>


<h3>Solution</h3>

<p>This question is very difficult. We need to do <strong>DP with 2 DP arrays</strong>, available to read <a href="http://blog.csdn.net/linhuanmars/article/details/23236995">here</a>.</p>

<p>The 2 arrays' definition as follow:</p>

<blockquote><p>global[i][j]=max(local[i][j],global[i-1][j])</p>

<p>当前到达第i天可以最多进行j次交易，最好的利润是多少（global[i][j]）</p>

<p>当前到达第i天，最多可进行j次交易，并且最后一次交易在当天卖出的最好的利润是多少（local[i][j]）</p></blockquote>

<p>And the formula for calculating local[] is:</p>

<blockquote><p>local[i][j]=max(global[i-1][j-1]+max(diff,0),local[i-1][j]+diff)，</p>

<p>第一个是全局到i-1天进行j-1次交易，然后加上今天的交易，如果今天是赚钱的话（也就是前面只要j-1次交易，最后一次交易取当前天），</p>

<p>第二个量则是取local第i-1天j次交易，然后加上今天的差值。</p></blockquote>

<p>And the final code (by blogger <strong>Code_Ganker</strong> from the same link) would look like this:</p>

<pre><code>public int maxProfit(int[] prices) {
    if(prices==null || prices.length==0)
        return 0;
    int[] local = new int[3];
    int[] global = new int[3];
    for(int i=0;i&lt;prices.length-1;i++)
    {
        int diff = prices[i+1]-prices[i];
        for(int j=2;j&gt;=1;j--)
        {
            local[j] = Math.max(global[j-1]+(diff&gt;0?diff:0), local[j]+diff);
            global[j] = Math.max(local[j],global[j]);
        }
    }
    return global[2];
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java OOP] Java ArrayList Implementation]]></title>
    <link href="http://okc1.github.io/blog/2015/10/28/arraylist-implementation/"/>
    <updated>2015-10-28T00:00:00-07:00</updated>
    <id>http://okc1.github.io/blog/2015/10/28/arraylist-implementation</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p><strong><a href="http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html">Resizable-array</a></strong> implementation of the List interface. (it&rsquo;s actually an <a href="http://stackoverflow.com/a/7382507">array of Object</a>)</p>

<p>It&rsquo;s not synced.</p>

<h2>Underlying design</h2>

<ol>
<li><p><strong>Random access</strong> – no need to traverse thru all nodes.</p></li>
<li><p><strong>Circular array</strong> - Array size is pre-defined. Use head and tail to keep track of list position.</p></li>
<li><p><strong>Insertion and deletion</strong> - Implement <strong>shiftRight()</strong> and shiftLeft() methods.</p></li>
</ol>


<p>Actual code will come later&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java OOP] Static Class and Inner Class]]></title>
    <link href="http://okc1.github.io/blog/2015/10/23/static-class-inner-class/"/>
    <updated>2015-10-23T00:00:00-07:00</updated>
    <id>http://okc1.github.io/blog/2015/10/23/static-class-inner-class</id>
    <content type="html"><![CDATA[<h1>Nested classes</h1>

<p>Both Static class and Inner class are called <strong>nested class</strong>.</p>

<p><a href="http://tutorials.jenkov.com/java/nested-classes.html">The purpose of a nested class</a> is to <strong>clearly group the nested class with its surrounding class</strong>, signaling that these two classes are to be used together.</p>

<p>Now the 2 types:</p>

<ol>
<li>Static nested classes (also: Static Classes )</li>
<li>Non-static nested classes (also: Inner Class)</li>
</ol>


<h2>Static Classes</h2>

<p>Declare:</p>

<pre><code>public class Outer {
    public static class Nested {

    }
}
</code></pre>

<p>Instantiate (just like a normal class):</p>

<pre><code>Outer.Nested instance = new Outer.Nested();
</code></pre>

<h2>Inner Classes</h2>

<pre><code>public class Outer {
    public class Inner {

    }
}
</code></pre>

<p>Instantiate (you MUST have an instance of enclosing class, and look weird the &lsquo;new&rsquo; keyword looks):</p>

<pre><code>Outer outer = new Outer();
Outer.Inner inner = outer.new Inner();
</code></pre>

<h1>access level</h1>

<p><strong>Inner class</strong> can access private members in enclosing class (static or non-static).</p>

<pre><code>public class Outer {

    private String text = "I am private!";

    public class Inner {

        public void printText() {
            System.out.println(text);
        }
    }
}
</code></pre>

<p><strong>Static class</strong> <a href="http://www.geeksforgeeks.org/static-class-in-java/">cannot access non-static members</a>.</p>

<h1>top-level static class?</h1>

<p>Java has <strong><a href="http://stackoverflow.com/a/7486111">no way of making a top-level class static</a></strong> but you can simulate a static class like this:</p>

<ol>
<li><p>Declare your class final</p></li>
<li><p>Make the constructor private</p></li>
<li><p>Make all the members and functions of the class static</p></li>
</ol>


<p>(this basically is a Singleton)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java OOP] What Is Java Exception]]></title>
    <link href="http://okc1.github.io/blog/2015/10/23/java-what-is-exception/"/>
    <updated>2015-10-23T00:00:00-07:00</updated>
    <id>http://okc1.github.io/blog/2015/10/23/java-what-is-exception</id>
    <content type="html"><![CDATA[<h1>The class</h1>

<p><strong><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Exception.html">The class Exception</a></strong> and its subclasses are a form of <strong>Throwable</strong> that indicates conditions that a reasonable application might want to catch.</p>

<h1>The object</h1>

<p><strong><a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/definition.html">An exception is an event</a></strong>, which occurs during the execution of a program, that disrupts the normal flow of the program&rsquo;s instructions.</p>

<p><strong>When an error occurs</strong> within a method, the method <strong>creates an object and hands it off to the runtime system</strong>. The object, called an <strong>exception object</strong>, contains information about the error(eg. type, state etc).</p>

<h2>throw this object out!</h2>

<p>Creating an exception object and handing it to the runtime system is called <strong>throwing an exception</strong>.</p>

<p>After a method throws an exception, the runtime system (i.e. <strong>JVM</strong>) attempts to find something to handle it. This is <strong>exception handler</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java OOP] Java Vector and ArrayList]]></title>
    <link href="http://okc1.github.io/blog/2015/10/23/java-vector-arraylist/"/>
    <updated>2015-10-23T00:00:00-07:00</updated>
    <id>http://okc1.github.io/blog/2015/10/23/java-vector-arraylist</id>
    <content type="html"><![CDATA[<h1>Vector in Java</h1>

<p>Vector class implements a <strong>growable array</strong> of objects.</p>

<p>It&rsquo;s an array, <strong>not a list</strong>.</p>

<h1>Vector VS ArrayList</h1>

<ol>
<li>Vectors are synchronized, ArrayLists are not.</li>
<li>Data Growth Methods (ArrayList grow by &frac12; of its size, while Vector doubles)</li>
</ol>


<p>Usage: <a href="http://stackoverflow.com/a/2986307">ALWAYS use ArrayLists</a></p>

<blockquote><p>The vector was not the part of collection framework, it has been included in collections later. <strong>It can be considered as Legacy code</strong>.</p>

<p>There is nothing about Vector which List collection cannot do. Therefore Vector <strong><a href="http://beginnersbook.com/2013/12/difference-between-arraylist-and-vector-in-java/">should be avoided</a></strong>.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java OOP] Template Method Pattern (Abstract Class)]]></title>
    <link href="http://okc1.github.io/blog/2015/10/23/Template-method-pattern/"/>
    <updated>2015-10-23T00:00:00-07:00</updated>
    <id>http://okc1.github.io/blog/2015/10/23/Template-method-pattern</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p><strong><a href="https://en.wikipedia.org/wiki/Template_method_pattern">Template method pattern</a> is a behavioral design pattern</strong> that defines the program skeleton of an algorithm in a method, called template method, which <strong>defers some steps to subclasses</strong>.</p>

<p>It lets one <strong>redefine</strong> certain steps of an algorithm without changing the algorithm&rsquo;s structure.</p>

<h2>Usage</h2>

<p>The template method is used in frameworks, where each implements the invariant parts of a domain&rsquo;s architecture.</p>

<h2>Example in Java</h2>

<p>Refer to <a href="https://en.wikipedia.org/wiki/Template_method_pattern#Example_in_Java">code from WIKI</a>:</p>

<pre><code>/**
 * An abstract class that is common to several games in
 * which players play against the others, but only one is
 * playing at a given time.
 */

abstract class Game {
 /* Hook methods. Concrete implementation may differ in each subclass*/
    protected int playersCount;
    abstract void initializeGame();
    abstract void makePlay(int player);
    abstract boolean endOfGame();
    abstract void printWinner();

    /* A template method : */
    public final void playOneGame(int playersCount) {
        this.playersCount = playersCount;
        initializeGame();
        int j = 0;
        while (!endOfGame()) {
            makePlay(j);
            j = (j + 1) % playersCount;
        }
        printWinner();
    }
}

//Now we can extend this class in order 
//to implement actual games:

class Monopoly extends Game {

    /* Implementation of necessary concrete methods */
    void initializeGame() {
        // Initialize players
        // Initialize money
    }
    void makePlay(int player) {
        // Process one turn of player
    }
    boolean endOfGame() {
        // Return true if game is over 
        // according to Monopoly rules
    }
    void printWinner() {
        // Display who won
    }
    /* Specific declarations for the Monopoly game. */

    // ...
}

class Chess extends Game {

    /* Implementation of necessary concrete methods */
    void initializeGame() {
        // Initialize players
        // Put the pieces on the board
    }
    void makePlay(int player) {
        // Process a turn for the player
    }
    boolean endOfGame() {
        // Return true if in Checkmate or 
        // Stalemate has been reached
    }
    void printWinner() {
        // Display the winning player
    }
    /* Specific declarations for the chess game. */

    // ...
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Fundamental] Reflexive, Symmetric and Transitive Rules]]></title>
    <link href="http://okc1.github.io/blog/2015/10/22/reflexive-symmetric-transitive/"/>
    <updated>2015-10-22T00:00:00-07:00</updated>
    <id>http://okc1.github.io/blog/2015/10/22/reflexive-symmetric-transitive</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p>O(n) time complexity is both <strong>reflexive, symmetric and transitive</strong>.</p>

<h2>Reflexive Property</h2>

<p>The Reflexive Property states that for every real number x, x = x.</p>

<h2>Symmetric Property</h2>

<p>The Symmetric Property states that for all real numbers x and y,</p>

<p>if x = y, then y = x.</p>

<h2>Transitive Property</h2>

<p>The Transitive Property states that for all real numbers x, y, and z,</p>

<p>if x = y and y = z, then x = z.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Fundamental] Polynomial, Quadratic, Cubic and Exponential]]></title>
    <link href="http://okc1.github.io/blog/2015/10/22/polynomial-quadratic-cubic-exponential/"/>
    <updated>2015-10-22T00:00:00-07:00</updated>
    <id>http://okc1.github.io/blog/2015/10/22/polynomial-quadratic-cubic-exponential</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p>A comparison of all <a href="http://pages.cpsc.ucalgary.ca/~eharris/past/cpsc319/w12/tut01/">different time complexity</a>:</p>

<p><img class="middle" src="http://okc1.github.io/assets/images/gnuplot0-1500.png"></p>

<p>Shown above: Constant, <strong>logarithmic</strong>, linear, n-log-n, quadratic, cubic, <strong>exponential</strong> ( eg. O(2<sup>n</sup>) ).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Fundamental] What Is a Literal?]]></title>
    <link href="http://okc1.github.io/blog/2015/10/22/literals/"/>
    <updated>2015-10-22T00:00:00-07:00</updated>
    <id>http://okc1.github.io/blog/2015/10/22/literals</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p><a href="https://en.wikipedia.org/wiki/Literal_(computer_programming">A Literal</a>) is a notation for <strong>representing a fixed value in source code</strong>.</p>

<p>Almost all programming languages have notations for atomic values such as integers, floating-point numbers, and strings.</p>

<p>eg.</p>

<pre><code>int a = 1;
String s = "cat";
</code></pre>

<h2>Integer literal</h2>

<p><a href="https://en.wikipedia.org/wiki/Integer_literal">an integer literal</a> is an integer whose value is directly represented in source code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java OOP] Why Avoid Using Protected?]]></title>
    <link href="http://okc1.github.io/blog/2015/10/22/avoid-protected/"/>
    <updated>2015-10-22T00:00:00-07:00</updated>
    <id>http://okc1.github.io/blog/2015/10/22/avoid-protected</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p>Some experienced developers don’t use <strong>protected</strong> since it cannot provide clean data hiding.</p>

<p>Why is that?</p>

<h2>background</h2>

<p>Remembering in the post <strong>[Java OOP] Java modifier and Access Level</strong>, we got this:</p>

<p><img class="middle" src="http://okc1.github.io/assets/images/java-access-level-table.png"></p>

<p><strong>Note</strong>: Java default access setting is &lsquo;No modifier&rsquo;, which is also called &lsquo;<strong>Package Private</strong>&rsquo;.</p>

<p><strong>Another note</strong>: by saying &lsquo;subclass&rsquo;, it means subclass declared in <strong>another package</strong>.</p>

<p>And in <strong>[Design] Composition Over Inheritance</strong>, we know that basically <strong>inheritance breaks encapsulation</strong>.</p>

<h2>the reason</h2>

<ol>
<li><p>inheritance is seldom the best tool and is not as flexible</p></li>
<li><p>the protected members form an interface towards subclasses (which is bad)</p></li>
<li><p>interfaces are tricky to get right and document properly</p></li>
</ol>


<p>So, <a href="http://stackoverflow.com/questions/4913025/reasons-to-use-private-instead-of-protected-for-fields-and-methods">it&rsquo;s better not to make</a> the class inheritable and instead make sure it&rsquo;s as flexible as possible (and no more) by using other means.</p>

<h2>A excellent answer</h2>

<p>A excellent answer <a href="http://programmers.stackexchange.com/questions/162643/why-is-clean-code-suggesting-avoiding-protected-variables">from Sam Brand</a>:</p>

<ol>
<li><p>They tend to lead to <strong><a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">YAGNI</a></strong> issues. Unless you have a descendant class that actually does stuff with the protected member, make it private.</p>

<blockquote><p><strong>&ldquo;You aren&rsquo;t gonna need it&rdquo;</strong> (acronym: YAGNI) is a principle of extreme programming (XP) that states a programmer should not add functionality until deemed necessary.</p></blockquote></li>
<li><p>They tend to lead to <strong><a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle">LSP</a></strong> issues. Protected variables generally have some intrinsic invariance associated with them (or else they&rsquo;d be public). Inheritors then need to maintain those properties, which people can screw up or willfully violate.</p>

<blockquote><p><strong>Substitutability</strong> is a principle in OOP. It states that if S is a subtype of T, then objects of type T may be replaced with objects of type S without altering any of the desirable properties of that program</p>

<p><strong>Liskov substitution principle (LSP)</strong> is a particular definition of a subtyping relation introduced by Barbara Liskov in 1987</p></blockquote></li>
<li><p>They tend to violate <strong><a href="https://en.wikipedia.org/wiki/Open/closed_principle">OCP</a></strong>. If the base class makes too many assumptions about the protected member, or the inheritor is too flexible with the behavior of the class, it can lead to the base class' behavior being modified by that extension.</p>

<blockquote><p><strong>open/closed principle</strong> states &ldquo;software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification&rdquo;.</p>

<p>That is, such an entity can allow its behaviour to be extended without modifying its source code.</p>

<p>This is especially valuable in a production environment, where changes to source code may necessitate code reviews, unit tests, and other such procedures to qualify it for use in a product</p></blockquote></li>
<li><p>They tend to lead to inheritance for extension rather than composition. This tends to lead to tighter coupling, more violations of <strong><a href="https://en.wikipedia.org/wiki/Single_responsibility_principle">SRP</a></strong>, more difficult testing, and a slew of other things that fall within the &lsquo;favor composition over inheritance&rsquo; discussion.</p></li>
</ol>


<blockquote><p><strong>single responsibility principle</strong> states that every class should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class. All its services should be narrowly aligned with that responsibility</p></blockquote>

<h1>An example</h1>

<p>ClassA in packageA:</p>

<pre><code>package packA;

import packB.ClassB;

public class ClassA {

    protected int val = 10;

    protected String getColor() {
        return "colored";
    }

    public static void main(String[] args) {
        ClassA ins = new ClassA();
        System.out.println("val is " + ins.val);
        System.out.println("color is " + ins.getColor());
        System.out.println();

        ClassB ins2 = new ClassB();
        System.out.println("val is " + ins2.val);
        System.out.println("color is " + ins2.getColor());
    }
}
</code></pre>

<p>ClassB in packageB:</p>

<pre><code>package packB;

import packA.ClassA;

public class ClassB extends ClassA {

    public ClassB() {
        val = 5;
    }

    public String getColor() {
        return super.getColor();
    }
}
</code></pre>

<p>Execution result:</p>

<pre><code>val is 10
color is colored

val is 5
color is colored
</code></pre>

<p>The code shows how <strong>ClassB</strong> is able to access 1 <strong>protected variable</strong> and 1 <strong>protected method</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Fundamental] UML Class Diagrams]]></title>
    <link href="http://okc1.github.io/blog/2015/10/14/UML-diagrams/"/>
    <updated>2015-10-14T00:00:00-07:00</updated>
    <id>http://okc1.github.io/blog/2015/10/14/UML-diagrams</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p>A UML class diagram describes the object and information structures used by your application, both internally and in communication with its users.</p>

<h2>example</h2>

<p>Taken from <a href="https://msdn.microsoft.com/en-us/library/dd409437.aspx">here</a>.</p>

<p><img class="middle" src="http://okc1.github.io/assets/images/IC315445.png"></p>

<p><tbody><tr><th><p><span class="label">Shape</span></p></th><th><p><span class="label">Element</span></p></th><th><p><span class="label">Description</span></p></th></tr><tr><td><p>1</p></td><td><p><strong>Class</strong></p></td><td><p>A definition of objects that share given structural or behavioral characteristics. For more information, see <a href="https://msdn.microsoft.com/en-us/library/dd323860.aspx">Properties of types on UML class diagrams</a>.</p></td></tr><tr><td><p>1</p></td><td><p>Classifier</p></td><td><p>The general name for a class, interface, or enumeration. Components, use cases, and actors are also classifiers.</p></td></tr><tr><td><p>2</p></td><td><p>Collapse/ Expand control</p></td><td><p>If you cannot see the details of a classifier, click the expander at upper-left of the classifier. You might also have to click the [+] on each segment.</p></td></tr><tr><td><p>3</p></td><td><p><strong>Attribute</strong></p></td><td><p>A typed value attached to each instance of a classifier. </p><p>To add an attribute, click the <strong>Attributes</strong> section and then press <strong>ENTER</strong>. Type the signature of the attribute. For more information, see <a href="https://msdn.microsoft.com/en-us/library/dd323861.aspx">Properties of attributes on UML class diagrams</a>.</p></td></tr><tr><td><p>4</p></td><td><p><strong>Operation</strong></p></td><td><p>A method or function that can be performed by instances of a classifier. To add an operation, click the <strong>Operations</strong> section and then press <strong>ENTER</strong>. Type the signature of the operation. For more information, see <a href="https://msdn.microsoft.com/en-us/library/dd323859.aspx">Properties of operations on UML class diagrams</a>. </p></td></tr><tr><td><p>5</p></td><td><p><strong>Association</strong></p></td><td><p>A relationship between the members of two classifiers. For more information, see <a href="https://msdn.microsoft.com/en-us/library/dd323862.aspx">Properties of associations on UML class diagrams</a>. </p></td></tr><tr><td><p>5a</p></td><td><p><strong>Aggregation</strong></p></td><td><p>An association representing a shared ownership relationship. The <strong>Aggregation</strong> property of the owner role is set to <strong>Shared</strong>.</p></td></tr><tr><td><p>5b</p></td><td><p><strong>Composition</strong></p></td><td><p>An Association representing a whole-part relationship. The <strong>Aggregation</strong> property of the owner role is set to <strong>Composite</strong>.</p></td></tr><tr><td><p>6</p></td><td><p><strong>Association Name</strong></p></td><td><p>The name of an association. The name can be left empty.</p></td></tr><tr><td><p>7</p></td><td><p><strong>Role Name</strong></p></td><td><p>The name of a role, that is, one end of an association. Can be used to refer to the associated object. In the previous illustration, for any Order <span class="code">O</span>, <span class="code">O.ChosenMenu</span> is its associated Menu.</p><p>Each role has its own properties, listed under the properties of the association.</p></td></tr><tr><td><p>8</p></td><td><p><strong>Multiplicity</strong></p></td><td><p>Indicates how many of the objects at this end can be linked to each object at the other. In the example, each Order must be linked to exactly one Menu. </p><p><strong>*</strong> means that there is no upper limit to the number of links that can be made.</p></td></tr><tr><td><p>9</p></td><td><p><strong>Generalization</strong></p></td><td><p>The <em>specific</em> classifier inherits part of its definition from the <em>general</em> classifier. The general classifier is at the arrow end of the connector. Attributes, associations, and operations are inherited by the specific classifier.</p><p>Use the <strong>Inheritance</strong> tool to create a generalization between two classifiers.</p></td></tr></tbody></p>
]]></content>
  </entry>
  
</feed>
