<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ninechap | Woodstock Blog]]></title>
  <link href="http://okc1.github.io/blog/categories/ninechap/atom.xml" rel="self"/>
  <link href="http://okc1.github.io/"/>
  <updated>2016-06-13T01:11:53-07:00</updated>
  <id>http://okc1.github.io/</id>
  <author>
    <name><![CDATA[Kevin Durant]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[NineChap System Design] Class 4.2: Search Engine]]></title>
    <link href="http://okc1.github.io/blog/2015/08/30/design-class4-2/"/>
    <updated>2015-08-30T00:00:00-07:00</updated>
    <id>http://okc1.github.io/blog/2015/08/30/design-class4-2</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[NineChap System Design] Class 4.1: Crawler]]></title>
    <link href="http://okc1.github.io/blog/2015/08/30/design-class4-1/"/>
    <updated>2015-08-30T00:00:00-07:00</updated>
    <id>http://okc1.github.io/blog/2015/08/30/design-class4-1</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p><strong>KISS - Keep It Simple, Sweetie</strong>.</p>

<p>In Today&rsquo;s lecture:</p>

<ol>
<li>write a crawler</li>
<li>thread-saft consumer &amp; producer</li>
<li>GFS, BigTable and MapReduce</li>
<li>Top 10 keyword/anagram using MapReduce</li>
<li>Log analysis</li>
</ol>


<h1>News Aggregator App</h1>

<ol>
<li><p>Info Collection</p>

<p> crawler</p></li>
<li><p>Info retrieval: rank, search and recommend.</p>

<p> They are in fact, all related to <strong>sorting</strong>.</p></li>
</ol>


<p>{% img middle /assets/images/design-class4-News-Aggregator.png %}</p>

<h2>Step 1, Info collection with crawler</h2>

<h3>crawler code</h3>

<p>Python:</p>

<pre><code>import urllib2

# request
url = "www.google.com"
request = urllib2.Request(url)
response = urllib2.urlopen(request)
page = response.read()

# save the file
webFile = open('webpage.html', 'web')
webFile.write(page)
webFile.close()
</code></pre>

<h3>Network process</h3>

<p>Use of <strong>socket</strong>.</p>

<p>{% img middle /assets/images/design-class4-web-socket-1.png %}</p>

<p>Socket is like the cellphone in the Call Center example.</p>

<blockquote><p><strong><a href="https://en.wikipedia.org/wiki/Network_socket">socket</a></strong> is an endpoint of an inter-process communication across a computer network.</p>

<p>Today, most communication between computers is based on the Internet Protocol; therefore most network sockets are <strong>Internet sockets</strong>.</p></blockquote>

<p>What is socket? Where is it?</p>

<p>{% img middle /assets/images/design-class4-web-socket-2.png %}</p>

<p>It&rsquo;s in-between <strong>Application Layer</strong> (HTTP, FTP, DNS) and <strong>Transport layer</strong> (UDP, TCP).</p>

<p>Remembering that socket is like a cellphone. It is an <strong>abstraction layer</strong>, that hinds the complexity of lower layer, thus making it easier to sende data in application layer.</p>

<h3>How is client connected to Server?</h3>

<p>3-way handshake. Read <strong>[Design] TCP 3-Way Handshake</strong></p>

<h3>HTML</h3>

<p><a href="http://www.w3schools.com/js/js_htmldom.asp">DOM tree</a>:</p>

<p>{% img middle /assets/images/html-dom-tree.gif %}</p>

<blockquote><p><a href="http://www.w3.org/TR/DOM-Level-2-Core/introduction.html">Document Object Model</a> (DOM) is an application programming interface (API) for valid HTML and well-formed XML documents. It <strong>defines the logical structure of documents</strong> and the way a document is accessed and manipulated.</p></blockquote>

<h3>How to crawler all the news</h3>

<ol>
<li>Go to index page</li>
<li>identify all the links (regex)</li>
</ol>


<h2>Crawl more websites</h2>

<h3>Simple design</h3>

<ol>
<li>use crawlers to find out all list pages</li>
<li>send the new lists to a Scheduler</li>
<li>Scheduler will use crawlers again, to crawl pages.</li>
</ol>


<p>{% img middle /assets/images/design-class4-cralwer-arch-1.png %}</p>

<p>This design is bad, cuz there is crawler waste. How can we <strong>reuse</strong> these crawlers???</p>

<h3>Adv design</h3>

<p>Design crawler that can crawl <strong>both list and pages</strong> information.</p>

<blockquote><p>Look at our crawler: the text extraction logic and Regex for <em>abc.com</em> and <em>bfe.com</em> are totally different. However, they both share the same crawling techniques.</p></blockquote>

<p>So we pass in all info a crawler task needs. Like:</p>

<p>{% img middle /assets/images/design-class4-cralwer-arch-2.png %}</p>

<ol>
<li><p>we gave <strong>more priority to list pages than content pages</strong>. Otherwise, your content get out of date soon.</p></li>
<li><p>Type include both list/content and source info.</p></li>
<li><p>status can be done, working, or new.</p></li>
<li><p>timestamps helps us make sure each crawler runs every hour (let&rsquo;s say)</p></li>
</ol>


<p>So when schedule <strong>pick the next crawler task</strong> to run, it will choose <strong>based on Priority</strong>. However if the <strong>timestamp (availableTime) is not yet reached</strong>, the job won&rsquo;t be executed.</p>

<p>If you crawler <strong>runs until endTime</strong> and haven&rsquo;t finish, force finish it. We should also add <strong>task created time</strong> to the info.</p>

<h3>How to identify similar news?</h3>

<p>Calculate the similarity between pages. More on this subject later.</p>

<h2>How to design Scheduler?</h2>

<p>{% img middle /assets/images/design-class4-cralwer-arch-3.png %}</p>

<h3>Solution with Sleep</h3>

<p>Define variables:</p>

<pre><code>taskTable&lt;table&gt; - store task lists
pageTable&lt;page&gt; - store page contents

task.url
task.state = new/working/done
task.type = list/page
</code></pre>

<p>code:</p>

<pre><code>while (true) {
    // get 1 task. If can't get, wait
    taskTable.lock();               // IMPORTANT
    newTask = taskTable.findOne(state == 'new')

    if (!newTask) {
        taskTable.unlock();         // IMPORTANT
        sleep(1000);                // IMPORTANT
        continue;
    }

    newTask.state = "working";
    taskTable.unlock();

    // execute the task, and insert to
    // either taskTable or pageTable
    newPage = Crawl(newTask.url);

    if (newTask.state === 'list') {
        // insert all urls to taskTable
        taskTable.lock();
        foreach (url in newPage) {
            taskTable.add(new task(url));
        }

        // mark the task as "done"
        newTask.state = "done";     // IMPORTANT
        taskTable.unlock();
    } else {
        // insert page content to pageTable
        pageTable.lock();
        pageTable.add(newPage.content());
        pageTable.unlock();

        // mark the task as "done"
        taskTable.lock();
        newTask.state = "done";     // IMPORTANT
        taskTable.unlock();
    }
}
</code></pre>

<h3>Solution with Conditional Variable</h3>

<p>What is Conditional Variable:</p>

<blockquote><p><a href="https://goo.gl/xOFXrY">A condition variable</a> is basically <strong>a container of threads that are waiting on a certain condition</strong>.</p>

<p>Monitors provide a mechanism for threads to temporarily give up exclusive access in order to wait for some condition to be met, before regaining exclusive access and resuming their task.</p></blockquote>

<p>{% img middle /assets/images/design-class4-condition-variable.png %}</p>

<p>Look at last 3 lines of code. <strong>Before going to sleep, CV have to release the lock</strong>, so that other threads can access the taskTable.</p>

<p>Then CV goes to sleep. <strong>Right after CV has been waken up</strong>, it has to lock the mutex again.</p>

<p>Solution w/ cv:</p>

<pre><code>while (true) {
    // get 1 task. If can't get, wait
    taskTable.lock();
    newTask = taskTable.findOne(state == 'new')

    if (!newTask) {
        taskTable.unlock();
        Cond_Wait(cond, taskTable);  // Modified
        continue;
    }

    newTask.state = "working";
    taskTable.unlock();

    // execute the task, and insert to
    // either taskTable or pageTable
    newPage = Crawl(newTask.url);

    if (newTask.state === 'list') {
        // insert all urls to taskTable
        taskTable.lock();
        foreach (url in newPage) {
            taskTable.add(new task(url));
            Cond_Signal(cond);       // Modified
        }

        // mark the task as "done"
        newTask.state = "done";
        taskTable.unlock();
    } else {
        // insert page content to pageTable
        pageTable.lock();
        pageTable.add(newPage.content());
        pageTable.unlock();

        // mark the task as "done"
        taskTable.lock();
        newTask.state = "done";
        taskTable.unlock();
    }
}
</code></pre>

<p>Why Good: no need to busy-spin (example above have to always wait 1 second). So this solution is better.</p>

<h3>Solution with Semaphore</h3>

<p>This is better than Condition Variable, cuz it&rsquo;s easier to implement. And Semaphore not only locks thread, it also <strong>can lock process</strong>.</p>

<p>CV locks on a certain condition. But Semaphore locks the numbers (of task, or resources etc).</p>

<p>Semaphore implementation (fairly difficult, read for interest):</p>

<pre><code>Wait(semaphore) {
    Lockf(semaphore);
    semaphore.value--;
    if (semaphore.value &lt; 0) {
        semaphore.processWaitList.Add(this.process);
        Release(semaphore);
        Block(this.process);
    } else {
        Release(semaphore);
    }
}

Signal(semaphore) {
    Lock(semaphore);
    semaphore.value++;
    if (semaphore.value &lt;= 0) {
        process = semaphore.processWaitList.pop();
        Wakeup(process);
    }
    Release(semaphore);
}
</code></pre>

<p>Note that in Java and C++, Wait() == acquire() and Signal() == release(). Read more <a href="http://tutorials.jenkov.com/java-util-concurrent/semaphore.html">Jenkov&rsquo;s post</a>.</p>

<p>code w/ semaphore:</p>

<pre><code>while (true) {
    // get 1 task. If can't get, wait
    Wait(numberOfNewTask);           // Modified

    taskTable.lock();
    newTask = taskTable.findOne(state == 'new')
    newTask.state = "working";
    taskTable.unlock();

    // execute the task, and insert to
    // either taskTable or pageTable
    newPage = Crawl(newTask.url);

    if (newTask.state === 'list') {
        // insert all urls to taskTable
        taskTable.lock();
        foreach (url in newPage) {
            taskTable.add(new task(url));
            Signal(numberOfNewTask); // Modified
        }

        // mark the task as "done"
        newTask.state = "done";
        taskTable.unlock();
    } else {
        // insert page content to pageTable
        pageTable.lock();
        pageTable.add(newPage.content());
        pageTable.unlock();

        // mark the task as "done"
        taskTable.lock();
        newTask.state = "done";
        taskTable.unlock();
    }
}
</code></pre>

<p><strong>What happens in Line 3 &lsquo;Wait(numberOfNewTask)&rsquo;</strong>? Well, the programs checks on the numberOfNewTask (counter) variable, and:</p>

<ol>
<li>If there is 1 or more tasks, just proceed.</li>
<li>If no tasks available, block itself and wait there. (Later someone will wake it up and it will resume).</li>
</ol>


<h3>Design an consumer-producer</h3>

<p>Stay tuned for future post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[NineChap System Design] Class 3.2: Web Service]]></title>
    <link href="http://okc1.github.io/blog/2015/08/28/design-class3-2/"/>
    <updated>2015-08-28T00:00:00-07:00</updated>
    <id>http://okc1.github.io/blog/2015/08/28/design-class3-2</id>
    <content type="html"><![CDATA[<h1>Question 4</h1>

<p><strong>fix MP3 problem</strong></p>

<p>The process of fetching a MP3 (from CDN):</p>

<p>{% img middle /assets/images/design-class3-client-request-mp3.png %}</p>

<ol>
<li>aquire MP3 link, and send request</li>
<li>send request to CDN</li>
<li>CDN receive request, find MP3</li>
<li>response to client</li>
<li>play the music</li>
</ol>


<p>{% img middle /assets/images/design-class3-client-request-mp3-errors.png %}</p>

<p>Question: in step 2, there&rsquo;s more Network error, but in step 4, there&rsquo;s no Network error, but Timeout. Why?</p>

<h2>Fix step 2, Network error</h2>

<p>Problem is: MP3 url invalid. It actually comes from a failed CDN sever.</p>

<p>Solution: fix the server.</p>

<h2>Fix step 3, CDN can&rsquo;t find MP3</h2>

<p>Problem associated with <strong>Anti-Leech</strong>.</p>

<blockquote><p><strong><a href="https://en.wikipedia.org/wiki/Leech_(computing">a leech</a>)</strong> is one who benefits, usually deliberately, from others' information or effort but does not offer anything in return.</p>

<p>Example: Wi-Fi leeches, Direct linking (or hot-linking) and In most P2P-networks, leeching is whose who download too much.</p>

<p><strong><a href="https://answers.yahoo.com/question/index?qid=1006042926419">Anti-Leech</a></strong> specializes in protecting file downloads and stopping bandwidth leeching.</p></blockquote>

<p>See that some P2P and leeching software will steal your url links, so the MP3 url expiration time is 5 minutes.</p>

<p>So when CDN server&rsquo;s clock and web server&rsquo;s clock are not synchronized well, MP3 url can expire.</p>

<p>Solution: every 10 minutes sync CDN clock with web server clock.</p>

<h2>Fix step 4, Timeout error</h2>

<p>Some MP3 are relatively large. Thus timeout.</p>

<blockquote><p>MP3 performs better at higher bps, and aac(Advanced Audio Coding) works better at lower bps.</p></blockquote>

<p>Solution:</p>

<ol>
<li><p>compress MP3 to 48bps, or use aac format. So, play lower-rate music first, then switch automatically.</p></li>
<li><p>pre-load a music while previous is playing.</p></li>
<li><p>optimize CDN</p></li>
</ol>


<blockquote><p><strong><a href="https://en.wikipedia.org/wiki/Content_delivery_network">CDN</a></strong> content delivery network is a large <strong>distributed system of servers</strong> deployed in <strong>multiple data centers</strong> across the Internet.</p>

<p>The goal of a CDN is to serve content to end-users with high availability and high performance.</p></blockquote>

<p>{% img middle /assets/images/design-class3-CDN.png %}</p>

<p>Which CDN should client choose?</p>

<blockquote><p>Not DNS, but web server calculates which to choose. It can be calculated using IP distance, or ISP provider, but not accurate.</p>

<p>We can also use local desktop apps (in different locations) to ping CDN servers. This may violate user privacy, though.</p></blockquote>

<h2>Fix step 5, Fail to play</h2>

<p>Problem: some files got wrong decoding.</p>

<h2>Fix step 6, unkown error</h2>

<p>Problem: some users close the page while MP3 loading.</p>

<h1>Question 5</h1>

<p><strong>fix player problem</strong></p>

<p>Problem: iOS device can never play Flash.</p>

<p>Solution: develop HTML5 player.</p>

<h2>5.2 how to evaluate that you solved the problem</h2>

<ol>
<li><p>user complains</p></li>
<li><p><strong>important</strong>: daily retention rate!</p></li>
</ol>


<p>We can&rsquo;t use daily active user, cuz it depends on marketing, competitors, and infrastructure changes.</p>

<p><strong>One day retention rate</strong>:</p>

<p>{% img middle /assets/images/design-class3-user-retention.png %}</p>

<blockquote><p>Today’s visitor = {U1, U3, U7, U9, U10}</p>

<p>Tomorrow&rsquo;s visitor = {U2, U3, U9,}</p>

<p>Today’s one day retention rate = 2/5</p></blockquote>

<h1>Question 6 秒杀</h1>

<h2>Design</h2>

<p>Queue A and Queue B</p>

<p>{% img middle /assets/images/design-class3-miao-sha.png %}</p>

<h3>Queue A</h3>

<p>Many queues, each one locates on a individual web server or reverse proxy. It is mainly used to accept large amount of requests coming from the clients.</p>

<p>Each machine may takes 10,000 or more requests per second.</p>

<p>Queue A will redirect most requests to a static page (cached).</p>

<h3>Queue B</h3>

<p>Queue B is a single machine, to aviod distributed problems. It takes in small amount of requests and decides results (eg. redirect to payment page).</p>

<blockquote><p>Now, why do we need 2 queues, not 1?</p>

<p>Think about a hospital. Queue A is the hospital lobby and security guard, and Queue B is the queue of patience.</p></blockquote>

<h2>How to reduce traffic</h2>

<ol>
<li>no image</li>
<li>cache more static pages</li>
<li>reverse proxy: batch sending the requests</li>
</ol>


<p>Also, can use front-end javascript to prevent clicking. There are method to bypass, so we need to check IP or do some filtering.</p>

<h2>How to keep it simple?</h2>

<ol>
<li>no DB: basic logic. But rmb to use a log file</li>
<li>no lock</li>
</ol>


<h2>How to improve stability</h2>

<ol>
<li>use new server to do <strong>Miao Sha</strong>, in case of crash</li>
<li>asyc prcessing everything! Don&rsquo;t let other people wait, in case of crash.</li>
</ol>


<h3>How to defend hackers</h3>

<ol>
<li>IP address (to defent auto softwares), but it&rsquo;s easy for hackers to fake IP address</li>
<li>CAPTCHA</li>
</ol>


<blockquote><p><strong><a href="https://en.wikipedia.org/wiki/CAPTCHA">CAPTCHA</a></strong> (an acronym for &ldquo;Completely Automated Public Turing test to tell Computers and Humans Apart&rdquo;) is a type of challenge-response test used in computing to determine whether or not the user is human.</p></blockquote>

<h2>follow-up</h2>

<p>How to design 12306 (support several million QPS)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[NineChap System Design] Class 3.1: Web Service]]></title>
    <link href="http://okc1.github.io/blog/2015/08/28/design-class3-1/"/>
    <updated>2015-08-28T00:00:00-07:00</updated>
    <id>http://okc1.github.io/blog/2015/08/28/design-class3-1</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p>Today we&rsquo;ll look at 6 examples of problems associated with Web Service:</p>

<ol>
<li>how the internet works</li>
<li>DNS</li>
<li>Web server</li>
<li>Music Player</li>
<li>MP3 file</li>
<li>秒杀</li>
</ol>


<h1>Question 0</h1>

<p><strong>how to solve raido-play failures</strong></p>

<pre><code>&gt; Failure rate  = % user who can't listen to music properly

&gt; = # user who fail to plya one song / # total users
</code></pre>

<p>Misson: reduce failure rate.</p>

<h2>How does server identify a user?</h2>

<p>{% img middle /assets/images/design-class3-http-request-overview.png %}</p>

<blockquote><p>If a server uses <strong>Cookie</strong> to identify unique users, the result might be > real users.</p>

<p>However, if server uses <strong>IP address</strong>, the result might be &lt; real users.</p></blockquote>

<h2>How to collect data for failure rate</h2>

<h3>Version 1</h3>

<p>Log:</p>

<ol>
<li>user send a log to server when it visits</li>
<li>user send another log after it plays a song</li>
<li>we can identify users who failed to play a song</li>
</ol>


<p>{% img middle /assets/images/design-class3-server-failure-rate-1.png %}</p>

<blockquote><p>In fact, everything should be logged, including play, pause, switch song, refresh etc.</p></blockquote>

<h3>Version 2</h3>

<p>User login are, in fact, <strong>automatically logged</strong> when user visits. Thus user ONLY have to send log <strong>after it plays music</strong>.</p>

<h2>Summary</h2>

<ol>
<li>define failure rate</li>
<li>user cookie to identify user</li>
<li>use log to collect failure data</li>
<li>analysis pattern of failure againt date/time</li>
</ol>


<h1>Question 1</h1>

<p><strong>the process of playing music</strong></p>

<p>{% img middle /assets/images/design-class3-web-browser-17-steps.png %}</p>

<ol>
<li>Prepare</li>
<li>Send DNS request</li>
<li>Prepare DNS reply</li>
<li>Send DNS reply</li>
<li><p>Process DNS reply</p>

<p> -</p></li>
<li><p>Send webpage request</p></li>
<li>Prepare webpage reply</li>
<li>Send webpage reply</li>
<li><p>Process webpage</p>

<p> -</p></li>
<li><p>Request music player</p></li>
<li>Prepare music player</li>
<li>Send music player</li>
<li><p>Process music player</p>

<p>-</p></li>
<li><p>Request MP3</p></li>
<li>Prepare MP3</li>
<li>Send MP3</li>
<li>Play MP3</li>
</ol>


<p>What is process Music Play?</p>

<blockquote><p>Local browser will do rendering, flash decoding etc. If any point of this 17 steps went wrong, the music-play fails.</p></blockquote>

<p>Is there a system/browser default Music Play?</p>

<blockquote><p>HTML player is, but flash player is not. So the flash module have to be requested every time.</p></blockquote>

<h2>Real data: failure rate 20%</h2>

<p>In practise, the real failure rate is 20%. Which is:</p>

<ol>
<li>8% DNS</li>
<li>5% Web</li>
<li>5% MP3</li>
<li>2% Player</li>
</ol>


<h1>Question 2</h1>

<p><strong>fix DNS problem</strong></p>

<p>First of all, how to find out DNS failures? There are 2 ways. First way, help desk do it. Second way is to use the Desktop app to help detect the host address.</p>

<h2>Step 1. HOSTs hijack</h2>

<p>Some users' host file can modified by competitors.</p>

<ol>
<li>ping the website url</li>
<li>modify host file manually or by desktop app</li>
</ol>


<h2>Step 2. ISP</h2>

<p>Each ISP have different DNS service. Eg. CSTNET fails to update the latest DNS, after a server change.</p>

<p>After this step, DNS failure rate fall from 8% to 1%. Why still 1%? Some companies bans music play in company web.</p>

<h1>Question 3</h1>

<p><strong>fix the web problem</strong></p>

<p>Highest failure rate:</p>

<ol>
<li>3pm office hour</li>
<li>9pm highest bandwidth nation-wide</li>
</ol>


<p>{% img middle /assets/images/design-class3-web-failure-graph.png %}</p>

<h2>Solution 1, reverse proxy</h2>

<p>Reverse proxy w/ more servers. Reverse proxy acts like a load balancer.</p>

<p>{% img middle /assets/images/design-class3-reverse-proxly.png %}</p>

<blockquote><p><strong><a href="https://en.wikipedia.org/wiki/Reverse_proxy">Reverse proxy</a></strong> is a type of proxy server that retrieves resources on behalf of a client from one or more servers. These resources are then returned to the client as though they originated from the proxy server itself.</p></blockquote>

<p><a href="https://www.nginx.com/resources/glossary/reverse-proxy-server/">Common uses for a reverse proxy server</a> include:</p>

<blockquote><ol>
<li><p>Load balancing</p>

<p>act as a “traffic cop,” sitting in front of your back-end servers and client requests. Try to <strong>maximizes speed and capacity utilization</strong> while ensuring <strong>no one server is overloaded</strong>.</p>

<p>If a server goes down, the load balancer redirects traffic to the remaining online servers.</p></li>
<li><p>Web acceleration</p>

<p> can compress inbound and outbound data, as well as <strong>cache commonly requested content</strong></p>

<p> also perform additional tasks such as SSL encryption to take <strong>load off of your web servers</strong></p></li>
<li><p>Security and anonymity</p>

<p> By intercepting requests headed for your back-end servers, a reverse proxy server protects their identities and acts as an additional defense against security attacks.</p></li>
</ol>
</blockquote>

<h2>Solution 2, reduce size of web page</h2>

<ol>
<li>simplify javascript files</li>
<li>compress images (lower dpi)</li>
<li>merge large images to 1 image (less requests)</li>
<li>lazy loading (Pinterest uses it a lot)</li>
</ol>


<h2>Solution 3, more cacheable pages</h2>

<p> <strong>Change dynamic webpages to static pages</strong>. The advantage of this is:</p>

<ol>
<li>more search engine friendly.</li>
<li>more cache friendly.</li>
</ol>


<h3>Summary on caching</h3>

<p>Caching can happen at place Number 1, 2 and 3:</p>

<p>{% img middle /assets/images/design-class3-web-hosting-4-layers.png %}</p>

<p>AT Number 4, we can add <strong>more servers</strong>. Number 3, <strong>reverse proxy</strong>. Number 2 is <strong>caching within the ISP network</strong>, which avoids requesting info again from backend. Number 1 is <strong>front-end browser cache</strong>.</p>

<p>After this step, Web failure rate fall from 7% to 4%. Why still 4%? Well, these failure is mainly from the junk users created by marketing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[NineChap System Design] Class 2.2: Database]]></title>
    <link href="http://okc1.github.io/blog/2015/08/26/design-class2-2/"/>
    <updated>2015-08-26T00:00:00-07:00</updated>
    <id>http://okc1.github.io/blog/2015/08/26/design-class2-2</id>
    <content type="html"><![CDATA[<h1>Question 5</h1>

<p>Continue from last post, now let&rsquo;s <strong>support VIP services</strong>.</p>

<p>User could buy VIP services using his acccount balance.</p>

<pre><code>class ProService {
    int userId;
    double money;
    long endTime;

    public addMoney(){}
    public buyPro(){}
}
</code></pre>

<h2>Q5.1: System crash when purchasing VIP</h2>

<p>Solution: <strong>transaction with log</strong></p>

<pre><code>WriteLOG
Transaction_1123: BEGIN
money=20; endTime=16_07_2016
</code></pre>

<p>If system crash happens here, system will read the log, recover and roll back all original data. Try not to complete the transaction - just fail it.</p>

<pre><code>WriteLOG
Transaction_1123: BEGIN
money=20; endTime=16_07_2016
WriteLOG
Transaction_1123: END
money=10; endTime=16_08_2016
</code></pre>

<blockquote><p>What happens if system crash during writing the log? or during the rollback?</p></blockquote>

<h2>Q5.2: dataset contains bad data</h2>

<ol>
<li>one user id have 2 corresponding pro-services information.</li>
<li>Shallow user: a pro-services info does not have corresponding user.</li>
</ol>


<p>Solution: have a checker class.</p>

<h2>Q5.3: simutaneous purchase by 2 users</h2>

<p>Solution: lock.</p>

<ol>
<li>first process lock money &amp; endTime.</li>
<li>Read money = 20</li>
<li>another process try to lock, but end up waiting (sleeping).</li>
<li>first process do the job, and release the lock.</li>
<li>another process wakes up.</li>
</ol>


<blockquote><p>lock have time-out settings. It can be applied in distributed system as well.</p></blockquote>

<p>Question: does lock make your execution slow?</p>

<ol>
<li><p>If another process is sleeping, CPU will be fully consumed by other process. So it won&rsquo;t impact.</p></li>
<li><p>You can do some async processing, too.</p></li>
<li><p>When you lock, try to lock only a small piece of code, not the entire method. In DB, lock only a row, not a table.</p></li>
<li><p>Java <a href="https://en.wikipedia.org/wiki/Compare-and-swap">CAS</a> (Compare and swap )</p></li>
</ol>


<h2>Q5.4: Server crash</h2>

<p>Solution: duplication.</p>

<ol>
<li><p>How many copies?</p>

<p> Google did 3. Normally 2 in same data center, and 1 in another location.</p>

<p> Backup data normally is on another machine. But there&rsquo;s also <a href="https://en.wikipedia.org/wiki/RAID">RAID</a> (redundant array of independent disks) which:</p>

<blockquote><p>combines multiple physical disk drive components into a single logical unit for the purposes of <strong>data redundancy, performance improvement</strong>, or both.</p></blockquote></li>
<li><p>When does the copy happen?</p>

<p> Option 1 is <strong>doing everyday nightly</strong>. This is called a &lsquo;check point&rsquo;.</p>

<p> Option 2 is use another server to support <strong>Shadow Redundancy</strong>. All data from Machine 0 will be copied to Machine 1 WHILE it happens. The result is, Machine 1 is identical to Machine 0. If Machine 0 crashes, Machine 1 may be behind less than 1 second.</p>

<p> The way to duplicate is either re-play all the actions, or to read Machine 0&rsquo;s log and apply the new data.</p></li>
<li><p>How to copy?</p>

<p> User send data to 1 server, and from that server, pipeline. This ensures good usage of server bandwith, and serial transfer of data ensures low latency (several ms).</p>

<p> It&rsquo;s also possible to do tree-like transfer, but the above method is preferred cuz all machine consume same bandwidth.</p></li>
<li><p>What is log?</p>

<p> It is actually &lsquo;checkpoint&rsquo; + log. It allows you to rollback.</p></li>
</ol>


<p>Data redundancy - Summary:</p>

<p>{% img middle /assets/images/design-class2-data-redundancy-1.png %}</p>

<h2>Final note: Data inconsistency</h2>

<p>Main sources of inconsistency comes from:</p>

<ol>
<li>network fault</li>
<li>disk error</li>
</ol>


<p>The disk eror is solved by <strong>checksum</strong> (compare during disk writing).</p>

<h1>Summary</h1>

<p><strong><a href="https://en.wikipedia.org/wiki/ACID">ACID</a> (Atomicity, Consistency, Isolation, Durability)</strong>  is a set of properties that guarantee that database transactions are processed reliably.</p>

<ol>
<li><p><strong>Atomicity: all or nothing</strong></p>

<p> Q5.1: System crash when purchasing VIP</p></li>
<li><p><strong>Consistency</strong>: validate according to defined rules</p>

<p> Q5.2: dataset contains bad data</p></li>
<li><p><strong>Isolation</strong>: independency between transactions <strong>(lock)</strong></p>

<p> Q5.3: simutaneous purchase by 2 users</p></li>
<li><p><strong>Durability</strong>: stored permanently</p>

<p> Q5.4: Server crash</p></li>
</ol>


<p>{% img middle /assets/images/design-class2-summary.png %}</p>

<p>Additional Questions:</p>

<ol>
<li>design a user system (Netflix 2015)</li>
</ol>


<p>Hint: table design, register, login/out, password check, find password.</p>

<ol>
<li>Design payment system (Yelp, BigCommerce 2015)</li>
</ol>


<p>Hint: the question does not ask about table/ds design itself, but rather the problems associated with payment. Read about ACID principle.</p>
]]></content>
  </entry>
  
</feed>
