<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Question | Woodstock Blog]]></title>
  <link href="http://okc1.github.io/blog/categories/question/atom.xml" rel="self"/>
  <link href="http://okc1.github.io/"/>
  <updated>2016-06-13T01:11:53-07:00</updated>
  <id>http://okc1.github.io/</id>
  <author>
    <name><![CDATA[Kevin Durant]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Question] Swizzle Sort]]></title>
    <link href="http://okc1.github.io/blog/2015/11/21/swizzle-sort/"/>
    <updated>2015-11-21T00:00:00-08:00</updated>
    <id>http://okc1.github.io/blog/2015/11/21/swizzle-sort</id>
    <content type="html"><![CDATA[<h1>Question</h1>

<p><a href="http://www.mitbbs.com/article_t/Recommend/31493121.html">link</a></p>

<blockquote><p>输入一个数组，要求输出满足：a[0]&lt;=a[1]>=a[2]&lt;=a[3]>=…</p></blockquote>

<h1>Solution</h1>

<blockquote><p>O(n)，一边扫描即可。发现不符合条件的只要跟前面一个数对调就可以，</p></blockquote>

<h1>Code</h1>

<pre><code>public int[] solve(int[] input) {
    boolean incr = true;
    int len = input.length;
    int p = 1;
    while (p &lt; len) {
        if (incr ^ (input[p - 1] &lt; input[p])) {
            Common.swap(input, p - 1, p);
        }
        p++;
        incr = !incr;
    }
    return input;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Partition Problem (Divide Array Into Halves)]]></title>
    <link href="http://okc1.github.io/blog/2015/11/15/partition-problem/"/>
    <updated>2015-11-15T00:00:00-08:00</updated>
    <id>http://okc1.github.io/blog/2015/11/15/partition-problem</id>
    <content type="html"><![CDATA[<h1>Question</h1>

<p><a href="http://www.geeksforgeeks.org/dynamic-programming-set-18-partition-problem/">link</a></p>

<blockquote><p><a href="https://en.wikipedia.org/wiki/Partition_problem">partition problem</a> is the task of deciding whether a given multiset S of positive integers can be partitioned into two subsets S1 and S2 such that the sum of the numbers in S1 equals the sum of the numbers in S2.</p>

<p>Examples</p></blockquote>

<pre><code>arr[] = {1, 5, 11, 5}
Output: true 
The array can be partitioned as {1, 5, 5} and {11}

arr[] = {1, 5, 3}
Output: false 
The array cannot be partitioned into equal sum sets.
</code></pre>

<h1>Solution</h1>

<p><strong>DP</strong> (only if sum of the elements is not too big).</p>

<blockquote><p><a href="http://www.geeksforgeeks.org/dynamic-programming-set-18-partition-problem/">We can create a 2D array</a> of size (sum/2)*(n+1). And we can construct the solution in bottom up manner such that every filled entry has following property:</p></blockquote>

<pre><code>part[i][j] = 
    true if a subset of {arr[0], arr[1], ..arr[j-1]} has sum equal to i
    false otherwise
</code></pre>

<p>Note that we always cares about <strong>whether there exist a valid subset from beginning to index i</strong>.</p>

<p>Example DP array for input &ldquo;3,1,1,2,2,1&rdquo;:</p>

<p>{% img middle /assets/images/partition-problem-dp.jpg %}</p>

<h1>Code</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Largest Sub-square With Edges Filled]]></title>
    <link href="http://okc1.github.io/blog/2015/10/07/largest-subsquare-with-edge-filled/"/>
    <updated>2015-10-07T00:00:00-07:00</updated>
    <id>http://okc1.github.io/blog/2015/10/07/largest-subsquare-with-edge-filled</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="www.geeksforgeeks.org/given-matrix-o-x-find-largest-subsquare-surrounded-x/index.html">link</a></p>

<blockquote><p>Given a matrix where every element is either ‘O’ or ‘X’, find the largest sub-square surrounded by ‘X’. (meaning that the 4 edges are filled with &lsquo;X&rsquo;)</p>

<p>Example Input:</p></blockquote>

<pre><code> {'X', 'O', 'X', 'X', 'X'},
 {'X', 'X', 'X', 'X', 'X'},
 {'X', 'X', 'O', 'X', 'O'},
 {'X', 'X', 'X', 'X', 'X'},
 {'X', 'X', 'X', 'O', 'O'},
</code></pre>

<blockquote><p>Output: 3. The square submatrix starting at (1, 1) is the largest sub-squre.</p>

<p>Example Input:</p></blockquote>

<pre><code> {'X', 'O', 'X', 'X', 'X', 'X'},
 {'X', 'O', 'X', 'X', 'O', 'X'},
 {'X', 'X', 'X', 'O', 'O', 'X'},
 {'X', 'X', 'X', 'X', 'X', 'X'},
 {'X', 'X', 'X', 'O', 'X', 'O'},
</code></pre>

<blockquote><p>Output: 4. The square submatrix starting at (0, 2) is the largest</p></blockquote>

<h3>Solution</h3>

<p>Read a very similar question - <strong>[Question] Maximum Square Sub-matrix With All 1s</strong></p>

<p>Typical DP question. Now the solution is to build 2 arrays to cache info. One horizontally and one, vertical.</p>

<blockquote><p>create two auxiliary arrays hor[N][N] and ver[N][N].</p>

<p>hor[i][j] is the number of horizontal continuous ‘X’ characters till mat[i][j] in mat[][].</p>

<p>ver[i][j] is the number of vertical continuous ‘X’ characters till mat[i][j] in mat[][].</p></blockquote>

<pre><code>mat[6][6] =  X  O  X  X  X  X
             X  O  X  X  O  X
             X  X  X  O  O  X
             O  X  X  X  X  X
             X  X  X  O  X  O
             O  O  X  O  O  O

hor[6][6] = 1  0  1  2  3  4
            1  0  1  2  0  1
            1  2  3  0  0  1
            0  1  2  3  4  5
            1  2  3  0  1  0
            0  0  1  0  0  0

ver[6][6] = 1  0  1  1  1  1
            2  0  2  2  0  2
            3  1  3  0  0  3
            0  2  4  1  1  4
            1  3  5  0  2  0
            0  0  6  0  0  0
</code></pre>

<p>After we got these, start from the bottom-right corner row by row up&hellip; For every mat[i][j], we compare hor[i][j] with ver[i][j] and pick the smaller one.</p>

<p>All we need to do next, is to check the other 2 edges. This solution is O(n<sup>3</sup>).</p>

<h3>Code</h3>

<p>C++ code provided by <a href="www.geeksforgeeks.org/given-matrix-o-x-find-largest-subsquare-surrounded-x/index.html">G4G</a>:</p>

<pre><code>int findSubSquare(int mat[][N])
{
    int max = 1; // Initialize result

    // Initialize the left-top value in hor[][] and ver[][]
    int hor[N][N], ver[N][N];
    hor[0][0] = ver[0][0] = (mat[0][0] == 'X');

    // Fill values in hor[][] and ver[][]
    for (int i=0; i&lt;N; i++)
    {
        for (int j=0; j&lt;N; j++)
        {
            if (mat[i][j] == 'O')
                ver[i][j] = hor[i][j] = 0;
            else
            {
                hor[i][j] = (j==0)? 1: hor[i][j-1] + 1;
                ver[i][j] = (i==0)? 1: ver[i-1][j] + 1;
            }
        }
    }

    // Start from the rightmost-bottommost corner element and find
    // the largest ssubsquare with the help of hor[][] and ver[][]
    for (int i = N-1; i&gt;=1; i--)
    {
        for (int j = N-1; j&gt;=1; j--)
        {
            // Find smaller of values in hor[][] and ver[][]
            // A Square can only be made by taking smaller
            // value
            int small = getMin(hor[i][j], ver[i][j]);

            // At this point, we are sure that there is a right
            // vertical line and bottom horizontal line of length
            // at least 'small'.

            // We found a bigger square if following conditions
            // are met:
            // 1)If side of square is greater than max.
            // 2)There is a left vertical line of length &gt;= 'small'
            // 3)There is a top horizontal line of length &gt;= 'small'
            while (small &gt; max)
            {
                if (ver[i][j-small+1] &gt;= small &amp;&amp;
                    hor[i-small+1][j] &gt;= small)
                {
                    max = small;
                }
                small--;
            }
        }
    }
    return max;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Find Cloest Leaf in Binary Tree]]></title>
    <link href="http://okc1.github.io/blog/2015/10/07/closest-leaf-binary-tree/"/>
    <updated>2015-10-07T00:00:00-07:00</updated>
    <id>http://okc1.github.io/blog/2015/10/07/closest-leaf-binary-tree</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="www.geeksforgeeks.org/find-closest-leaf-binary-tree/index.html">link</a></p>

<blockquote><p>Given a Binary Tree and a key, find distance of the closest leaf.</p>

<p>Examples:</p></blockquote>

<pre><code>          1
        /    \    
       2       3
             /   \  
            5     6   
           /       \
          7         8
         / \       /
        9  10     11

Closest key to '8' is '11', so distance is 1 for '8'
Closest key to '3' is '2', so distance is 2 for '3'
Closest key to '5' is either '9' or '10', so distance is 2 for '5'
Closest key to '2' is '2' itself, so distance is 0 for '2' 
</code></pre>

<h3>Solution</h3>

<blockquote><p>traverse the given tree in preorder and keep track of ancestors (in a caching data struture, either it&rsquo;s List or an array with a correct pointer)</p></blockquote>

<p>When we find our target, we do 2 things:</p>

<ol>
<li><p>find <strong>closest distance on lower subtrees of current node</strong>.</p></li>
<li><p>for every ancester, find the <strong>closest distance on lower subtrees</strong>, then add with <strong>distance to ancester</strong>.</p></li>
</ol>


<p>Finally, return the smallest value seen above.</p>

<h3>Code</h3>

<p>Inspired by the code from <a href="www.geeksforgeeks.org/find-closest-leaf-binary-tree/index.html">G4G</a></p>

<pre><code>int answer;

public int findClosest(TreeNode root, int key) {
    answer = Integer.MAX_VALUE;
    helper(root, key, new ArrayList&lt;TreeNode&gt;());
    return answer;
}

private void helper(TreeNode node, int key, List&lt;TreeNode&gt; path) {
    if (node == null) {
        return;
    } else if (node.val != key) {
        path.add(node);
        helper(node.left, key, path);
        helper(node.right, key, path);
        path.remove(path.size() - 1);
    } else {
        // key matches with current node value
        answer = lenToLowerLeaf(node);
        // answer initially = cloest leaf from lower

        int len = path.size();
        for (int i = 0; i &lt; len; i++) {
            // for every ancestor, calculate distance and compare
            int ithToLowerLeaf = lenToLowerLeaf(path.get(i));
            answer = Math.min(answer, (len - i) + ithToLowerLeaf);
        }
    }
}

private int lenToLowerLeaf(TreeNode node) {
    if (node == null) {
        return Integer.MAX_VALUE;
    } else if (node.left == null &amp;&amp; node.right == null) {
        return 0;
    } else {
        return 1 + Math.min(lenToLowerLeaf(node.left), lenToLowerLeaf(node.right));
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Amazon] All Strings by Placing Spaces]]></title>
    <link href="http://okc1.github.io/blog/2015/10/07/all-string-placing-space/"/>
    <updated>2015-10-07T00:00:00-07:00</updated>
    <id>http://okc1.github.io/blog/2015/10/07/all-string-placing-space</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="www.geeksforgeeks.org/print-possible-strings-can-made-placing-spaces/index.html">link</a></p>

<blockquote><p>Given a string, print all possible strings that can be made by placing spaces (zero or one) in between them.</p>

<p>Input:  str[] = &ldquo;ABC&rdquo;</p>

<p>Output:</p></blockquote>

<pre><code>    ABC
    AB C
    A BC
    A B C
</code></pre>

<h3>Solution</h3>

<p>recursion.</p>

<h3>Code</h3>

<pre><code>public void printAll(String input) {
    if (input == null || input.length() &lt;= 1) {
        // since we insert space in-between chars, so
        return;
    }
    int len = input.length();
    // len &gt;= 2
    helper(input, len - 1);
}

private void helper(String s, int p) {
    if (p == 1) {
        System.out.println(s);
        // no insertion
        System.out.println(s.substring(0, 1) + " " + s.substring(1));
        // insert at position 1
    } else {
        helper(s, p - 1);
        helper(s.substring(0, p) + " " + s.substring(p), p - 1);
    }
}
</code></pre>
]]></content>
  </entry>
  
</feed>
